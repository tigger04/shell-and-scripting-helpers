#+TITLE: Shell and Scripting Helpers
#+AUTHOR: tigger04
#+DATE: 2025-08-23

* Introduction

A collection of bash shell functions and utilities focused on performance and practical daily use. These scripts avoid expensive subshells where possible and provide consistent visual feedback.

* Quick Start

#+begin_src bash
git clone https://github.com/YOUR_GITHUB_USERNAME/shell-and-scripting-helpers.git
cd shell-and-scripting-helpers
./install-me
#+end_src

Add to your =~/.bashrc= (for macOS =~/.bash_profile=), *-or-* or add to taste, 
to any script you wish to use a particular function in:
#+begin_src bash
source ~/.qfuncs.sh  # functions that are useful for scripting
source ~/.emojis.sh  # emoji shortcode support
source ~/.colours.sh  # ANSI colours, using human readable variable names
[[ $- == *i* ]] && source ~/.clifuncs.sh  # useful interactive (terminal) functions
                                          # (only load for interactive shells)
#+end_src

- Package manager: Homebrew (macOS) or APT (Linux - assuming Debian/Ubuntu family)

** Bash 5 Installation (main dependency)
Bash 5 is standard in modern Linux and Windows Subsystem for Linux, but macOS comes with an older version, so upgrade if necessary.

*macOS:*
#+begin_src bash
brew install bash
#+end_src

* Installation

The =install-me= script:
1. Detects your operating system and package manager
2. Checks for Bash 5+ compatibility  
3. Scans for missing dependencies and offers to install them
4. Creates symlinks in your =$HOME= directory for all script files

** Dependencies

The installer can automatically install these tools:

- =ripgrep= - Fast text search
- =fd= - Modern find replacement
- =bat= - Enhanced cat with syntax highlighting  
- =tldr= - Simplified man pages
- =yt-dlp= - YouTube downloader
- =lsd= - Modern ls with colors
- =trash= - Safe file deletion
- =fzf= - Fuzzy finder
- =gstat= (macOS only) - GNU stat from coreutils

** Platform Support

- *macOS*: Uses Homebrew
- *Linux*: Uses APT (Debian/Ubuntu). Other distributions require manual dependency installation.

* Files

** =.qfuncs.sh= - Core Utilities

Performance-optimized functions for common tasks:

- =die()= - Error handling
- =warn()=, =info()= - Standardized messaging (outputs to stderr)
- =qbase()= - Fast basename/dirname without subshells
- =fullpath()= - Resolve absolute paths  
- =timestamp()=, =datestamp()= - Date/time utilities
- =confirm_continue()= - Interactive confirmation prompts

** =.emojis.sh= - Emoji Support

Associative array mapping GitHub emoji shortcodes to Unicode:
#+begin_src bash
echo "${moji[thumbs_up]}"  # üëç
#+end_src

** =.colours.sh= - ANSI Colors

ANSI escape sequences mapped to readable variable names.

** =.clifuncs.sh= - Interactive Functions

Command-line tools and aliases:

- =mkcd()= - Make directory and cd into it
- =trash()= - Safe file deletion  
- =rgg()=, =rgw()=, =rw()= - Ripgrep wrappers
- =help()= - Enhanced help using tldr and bat
- Git aliases: =s= (status), =commit()=, =pull()=, etc.

* Usage Examples

** Messaging
#+begin_src bash
info "Starting process..."
warn "This might take a while" 
die "Something went wrong"
#+end_src

** Path Operations
#+begin_src bash
qbase "/path/to/file.txt" basename dirname
fullpath "relative/path" result
#+end_src

** Confirmations
#+begin_src bash
confirm_continue "Delete files?" || exit 1
#+end_src

* Design Principles

- Performance: Avoid subshells where possible
- Consistency: All user output goes to stderr to preserve pipes
- Safety: Input validation and confirmation prompts
- Portability: Works on macOS and Linux with graceful degradation

* Troubleshooting

** Manual Dependency Installation

*macOS:*
#+begin_src bash
brew install ripgrep fd bat tldr yt-dlp lsd trash fzf coreutils
#+end_src

*Debian/Ubuntu:*
#+begin_src bash
sudo apt install ripgrep fd-find bat tldr yt-dlp lsd trash-cli fzf
#+end_src

** Common Issues

- Functions requiring specific tools will fail gracefully if dependencies are missing
- On macOS, git status functions require =gstat= from coreutils
- Linux users with non-APT package managers need to install dependencies manually

* Contributing

1. Fork the repository
2. Create a feature branch  
3. Test on both macOS and Linux
4. Ensure bash 5+ compatibility
5. Submit a pull request

* License

MIT License
